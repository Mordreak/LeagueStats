<?php

namespace LSTATS\RiotBundle\Repository;

use LSTATS\RiotBundle\Services\MatchsService;

/**
 * SummonerOneGameStatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SummonerOneGameStatRepository extends \Doctrine\ORM\EntityRepository
{
    public function getWardsStats()
    {
        try {
            $stats = array();

            $query = $this->getEntityManager()
                ->createQuery('SELECT Max(sog.wardsPlaced)
                            FROM LSTATS\RiotBundle\Entity\SummonerOneGameStat sog
                            LEFT JOIN sog.game g
                                 WHERE g.queueId IN (' . implode(',', MatchsService::RANKED_QUEUE_IDS) . ')');
            $maxWardsPlaced = $query->getResult();
            $maxWardsPlaced = $maxWardsPlaced[0][1];

            $step = intval($maxWardsPlaced / 30);

            for ($i = 0; $i < $step * 20; $i = $i + $step) {
                $query = $this->getEntityManager()
                    ->createQuery('SELECT COUNT(sog)
                            FROM LSTATS\RiotBundle\Entity\SummonerOneGameStat sog
                            LEFT JOIN sog.game g
                                 WHERE sog.wardsPlaced = :wardsPlaced
                                 AND g.queueId IN (' . implode(',', MatchsService::RANKED_QUEUE_IDS) . ')');
                $query->setParameter('wardsPlaced', $i);
                $gamesNumber = $query->getResult();
                $gamesNumber = $gamesNumber[0][1];

                if (!empty($gamesNumber)) {

                    $query = $this->getEntityManager()
                        ->createQuery('SELECT COUNT(sog)
                            FROM LSTATS\RiotBundle\Entity\SummonerOneGameStat sog
                            LEFT JOIN sog.game g
                                 WHERE sog.win = 1 AND sog.wardsPlaced = :wardsPlaced
                                 AND g.queueId IN (' . implode(',', MatchsService::RANKED_QUEUE_IDS) . ')');
                    $query->setParameter('wardsPlaced', $i);
                    $winsNumber = $query->getResult();
                    $winsNumber = $winsNumber[0][1];

                    if (!empty($winsNumber))
                        $stats['placed'][$i] = intval(($winsNumber / $gamesNumber) * 100);

                }
            }

            foreach ($stats['placed'] as $number => $ratio) {
                $query = $this->getEntityManager()
                    ->createQuery('SELECT COUNT(sog)
                            FROM LSTATS\RiotBundle\Entity\SummonerOneGameStat sog
                            LEFT JOIN sog.game g
                                 WHERE sog.wardsKilled = :wardsKilled
                                 AND g.queueId IN (' . implode(',', MatchsService::RANKED_QUEUE_IDS) . ')');
                $query->setParameter('wardsKilled', $number);
                $gamesNumber = $query->getResult();
                $gamesNumber = $gamesNumber[0][1];

                if (!empty($gamesNumber)) {

                    $query = $this->getEntityManager()
                        ->createQuery('SELECT COUNT(sog)
                            FROM LSTATS\RiotBundle\Entity\SummonerOneGameStat sog
                            LEFT JOIN sog.game g
                                 WHERE sog.win = 1 AND sog.wardsKilled = :wardsKilled
                                 AND g.queueId IN (' . implode(',', MatchsService::RANKED_QUEUE_IDS) . ')');
                    $query->setParameter('wardsKilled', $number);
                    $winsNumber = $query->getResult();
                    $winsNumber = $winsNumber[0][1];

                    if (!empty($winsNumber))
                        $stats['killed'][$number] = intval(($winsNumber / $gamesNumber) * 100);
                    else
                        unset($stats['placed'][$number]);

                } else {
                    unset($stats['placed'][$number]);
                }
            }
            $this->_em->clear();
            return $stats;
        } catch (\Exception $e) {
            return array();
        }
    }
}
