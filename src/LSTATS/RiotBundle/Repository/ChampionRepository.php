<?php

namespace LSTATS\RiotBundle\Repository;

use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use LSTATS\RiotBundle\Services\MatchsService;

/**
 * ChampionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChampionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getChampionsToList($pageNumber)
    {
        try {
            $offset = ($pageNumber - 1) * 10;
            $limit = 10;
            $query = $this->getEntityManager()
                ->createQuery('SELECT c FROM LSTATS\RiotBundle\Entity\Champion c')
                ->setMaxResults($limit)
                ->setFirstResult($offset);
            $champions = $query->getResult();
            return $champions;
        } catch (\Exception $e) {
            throw new NotFoundHttpException('Page Not Found');
        }
    }

    public function count()
    {
        try {
            $query = $this->getEntityManager()
                ->createQuery('SELECT COUNT(c) FROM LSTATS\RiotBundle\Entity\Champion c');
            $champions = $query->getResult();
            return intval($champions[0][1]);
        } catch (\Exception $e) {
            return 0;
        }
    }

    public function getChampionRates($champion)
    {
        try {
            $result = array();
            $query = $this->getEntityManager()
                ->createQuery('SELECT COUNT(g)
                            FROM LSTATS\RiotBundle\Entity\Game g
                            WHERE g.queueId IN (' . implode(',', MatchsService::RANKED_QUEUE_IDS) . ')');
            $totalGames = $query->getResult();
            $totalGames = $totalGames[0][1];

            $query = $this->getEntityManager()
                ->createQuery('SELECT COUNT(sog)
                            FROM LSTATS\RiotBundle\Entity\SummonerOneGameStat sog
                            LEFT JOIN sog.game g
                            WHERE sog.champion = :champion
                            AND g.queueId IN (' . implode(',', MatchsService::RANKED_QUEUE_IDS) . ')');
            $query->setParameter('champion', $champion);
            $championGames = $query->getResult();
            $championGames = $championGames[0][1];

            $query = $this->getEntityManager()
                ->createQuery('SELECT COUNT(sog)
                            FROM LSTATS\RiotBundle\Entity\SummonerOneGameStat sog
                            LEFT JOIN sog.game g
                            WHERE sog.champion = :champion
                            AND sog.win = 1
                            AND g.queueId IN (' . implode(',', MatchsService::RANKED_QUEUE_IDS) . ')');
            $query->setParameter('champion', $champion);
            $championWonGames = $query->getResult();
            $championWonGames = $championWonGames[0][1];

            $query = $this->getEntityManager()
                ->createQuery('SELECT COUNT(tog)
                            FROM LSTATS\RiotBundle\Entity\TeamOneGameStat tog
                            LEFT JOIN tog.game g
                            WHERE (tog.firstBan = :champion
                              OR tog.secondBan = :champion
                              OR tog.thirdBan = :champion
                              OR tog.fourthBan = :champion
                              OR tog.fifthBan = :champion)
                            AND g.queueId IN (' . implode(',', MatchsService::RANKED_QUEUE_IDS) . ')');
            $query->setParameter('champion', $champion);
            $championBanGames = $query->getResult();
            $championBanGames = $championBanGames[0][1];

            $result['pickRate'] = round(($championGames / $totalGames) * 100, 2);
            $result['winRate'] = round(($championWonGames / $championGames) * 100, 2);
            $result['banRate'] = round(($championBanGames / $totalGames) * 100, 2);

            return $result;
        } catch (\Exception $e) {
            return array();
        }
    }
}
